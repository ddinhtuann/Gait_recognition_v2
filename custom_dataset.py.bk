import os
import time
import torch
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder, OneHotEncoder   

def getAllData(train_path, test_path=None, train_ex_path=None):
    label_enc = LabelEncoder()
    
    #get train data
    train_df = pd.read_csv(train_path,dtype=str,header=None)
 
    if train_ex_path:
        df_ex = pd.read_csv(train_ex_path,dtype=str,header=None)
        for i in range(50):
            train_df =pd.concat([train_df,df_ex], ignore_index=True)

    train_df =  train_df.sample(frac=1)

    X_train = np.asarray([np.load(p) for p in train_df[0]])

    #get train label
    y_train = label_enc.fit_transform(train_df[1])

    np.save(f"labels.npy",label_enc.classes_)

    if test_path:
        #get train data
        df = pd.read_csv(test_path,dtype=str,header=None)
        test_df =  df.sample(frac=1)

        X_test = np.asarray([np.load(p) for p in test_df[0]])

        #get train label
        y_test = label_enc.transform(test_df[1])
    else:
        return X_train, y_train
    
    return X_train, y_train, X_test, y_test


def getAllData_v2(train_path, test_path=None, train_ex_path=None):
    print("getAllData.........")
    bname = os.path.splitext(train_path)[0].split("_")[-1]
    n_chunk = int(bname[1:])
    print("n_chunk", n_chunk)
    label_enc = LabelEncoder()
    

    #get train data
    train_df = pd.read_csv(train_path,dtype=str,header=None)
 
    if train_ex_path:
        df_ex = pd.read_csv(train_ex_path,dtype=str,header=None)
        for i in range(6):
            train_df =pd.concat([train_df,df_ex], ignore_index=True)

    # train_df =  train_df.sample(frac=1)
    X_train = [np.load(p) for p in train_df[0]] #+ [np.load(p) for p in df_ex[0]]*6
    X_train = np.asarray(X_train)


    #get train label
    y_train = label_enc.fit_transform(train_df[1])

    np.save(f"gait_labels/labels_n{n_chunk}.npy",label_enc.classes_)

    if test_path:
        #get train data
        test_df = pd.read_csv(test_path,dtype=str,header=None)
        test_df =  test_df.sample(frac=1)

        X_test = np.asarray([np.load(p) for p in test_df[0]])

        #get train label
        y_test = label_enc.transform(test_df[1])
    else:
        return X_train, y_train, X_train, y_train
    
    
    return X_train, y_train, X_test, y_test


def getExData(train_ex_path=None):

    #get train data
    train_df = pd.read_csv(train_ex_path,dtype=str,header=None) 
    
    # train_df =  train_df.sample(frac=1)

    X_train = np.asarray([np.load(p) for p in train_df[0]])

    #get train label
    y_train = train_df[1]
    
    return X_train, y_train, train_df[0]    

if __name__ == '__main__':
    data_gen = DataGenerator("features_data.csv",n_classes=5,input_size=(15,512))
    X, y = data_gen.getAllData()
    print(X.shape)
    idx = np.argmax(y,axis=1)
    print(data_gen.label_enc.inverse_transform(idx))

    